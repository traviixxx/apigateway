package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"strconv"
	"strings"

	"github.com/caarlos0/env"
	"github.com/gravitational/configure"
	"gopkg.in/yaml.v2"
)

const sourceFile string = "./template.yml"
const destFile string = "./production.yml"

type AutoGenerated struct {
	Server               Server               `yaml:"server"`
	Process              Process              `yaml:"process"`
	Logger               Logger               `yaml:"logger"`
	Database             Database             `yaml:"database"`
	Redis                []Redis              `yaml:"redis"`
	RedisClusterOptions	 RedisClusterOptions  `yaml:"redisClusterOptions"`
	Integrity            Integrity            `yaml:"integrity"`
	GoogleServiceAccount GoogleServiceAccount `yaml:"googleServiceAccount"`
}
type Server struct {
	Port int `yaml:"port"`
}
type Process struct {
	DisableSwagger bool `yaml:"disableSwagger"`
}
type Logger struct {
	ConsoleLevel    string `yaml:"consoleLevel" env:"LOGGER_CONSOLE_LEVEL"`
	EcsFormatEnable bool   `yaml:"ecsFormatEnable" env:"LOGGER_ECS_FORMAT_ENABLE"`
}
type Options struct {
	User       string `yaml:"user" env:"MONGODB_APPLICATION_USER"`
	Pass       string `yaml:"pass" env:"MONGODB_APPLICATION_PASS"`
	ReplicaSet string `yaml:"replicaSet",omitempty`
}
type Database struct {
	URI     string  `yaml:"uri" env:"MONGODB_URL"`
	Options Options `yaml:"options"`
}
type Redis struct {
	Host string `yaml:"host"`
	Port int    `yaml:"port"`
}
type RedisClusterOptions struct {
	KeyPrefix         		string `yaml:"keyPrefix" env:"REDIS_OPTIONS_KEY_PREFIX"`
}
type Integrity struct {
	AllowedWindowMilis         int `yaml:"allowedWindowMilis" env:"INTEGRITY_ALLOWED_WINDOW_MILIS"`
	TokenExpiryMin             int `yaml:"tokenExpiryMin" env:"INTEGRITY_TOKEN_EXPIRY_MIN"`
	TokenDeleteAfterExpiredMin int `yaml:"tokenDeleteAfterExpiredMin" env:"INTEGRITY_TOKEN_DELETE_AFTER_EXPIRED_MIN"`
}
type GoogleServiceAccount struct {
	Type                    string `yaml:"type" env:"GSA_TYPE"`
	ProjectID               string `yaml:"project_id" env:"GSA_PROJECT_ID"`
	PrivateKeyID            string `yaml:"private_key_id" env:"GSA_PRIVATE_KEY_ID"`
	PrivateKey              string `yaml:"private_key" env:"GSA_PRIVATE_KEY"`
	ClientEmail             string `yaml:"client_email" env:"GSA_CLIENT_EMAIL"`
	ClientID                string `yaml:"client_id" env:"GSA_CLIENT_ID"`
	AuthURI                 string `yaml:"auth_uri" env:"GSA_AUTH_URI"`
	TokenURI                string `yaml:"token_uri" env:"GSA_TOKEN_URI"`
	AuthProviderX509CertURL string `yaml:"auth_provider_x509_cert_url" env:"GSA_AUTH_PROVIDER_X509_CERT_URL"`
	ClientX509CertURL       string `yaml:"client_x509_cert_url" env:"GSA_CLIENT_X509_CERT_URL"`
}

func main() {
	var conf AutoGenerated
	yamlFile, err := ioutil.ReadFile(sourceFile)
	err = yaml.Unmarshal(yamlFile, &conf)
	if err != nil {
		panic(err)
	}
	configure.ParseEnv(&conf)
	env.Parse(&conf)
	redis_hosts := strings.Split(os.Getenv("REDIS_HOST"), ",")
	redis_port, _ := strconv.Atoi(os.Getenv("REDIS_PORT"))
	var appendedSlice []Redis
	for _, v := range redis_hosts {
		appendedSlice = append(appendedSlice, Redis{v, redis_port})
	}
	conf.Redis = appendedSlice
	yamlData, err := yaml.Marshal(conf)
	if err != nil {
		fmt.Printf("Error while Marshaling. %v", err)
	}
	err = ioutil.WriteFile(destFile, yamlData, 0644)
	if err != nil {
		panic("Unable to write data into the file")
	}
}
